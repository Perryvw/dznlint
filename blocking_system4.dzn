// Dezyne --- Dezyne command line tools
//
// Copyright Â© 2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
//
// This file is part of Dezyne.
//
// Dezyne is free software: you can redistribute it and/or modify it
// under the terms of the GNU Affero General Public License as
// published by the Free Software Foundation, either version 3 of the
// License, or (at your option) any later version.
//
// Dezyne is distributed in the hope that it will be useful, but
// WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Affero General Public License for more details.
//
// You should have received a copy of the GNU Affero General Public
// License along with Dezyne.  If not, see <http://www.gnu.org/licenses/>.
//
// Commentary:
//
// Code:

interface IBlocked
{
  enum Status{OK};
  in Status e();

  behavior
  {
    on e: reply(Status.OK);
  }
}

interface IAsync
{
  in void trigger();
  out void notify();

  behavior
  {
    bool pending = false;
    on trigger:
    {
      [!pending] pending = true;
      [pending] illegal;
    }
    on inevitable:
    {
      [pending]{pending = false; notify;}
    }
  }
}

component DoubleBlocked
{
  provides IBlocked provided;

  requires IBlocked blockedL;
  requires IBlocked blockedR;

  behavior
  {
    on provided.e(): {IBlocked.Status r = blockedL.e(); r = blockedR.e(); reply(r);}
  }
}

component CBlocked
{
  provides IBlocked provided;

  requires IAsync required;

  behavior
  {
    blocking on provided.e(): required.trigger();

    on required.notify(): provided.reply(IBlocked.Status.OK);
  }
}

component blocking_system4
{
  provides IBlocked port;

  requires IAsync asyncL;
  requires IAsync asyncR;

  system
  {
    DoubleBlocked blocked;
    Blocked blockedL;
    Blocked blockedR;

    port <=> blocked.provided;
    blocked.blockedL <=> blockedL.provided;
    blocked.blockedR <=> blockedR.provided;

    blockedL.required <=> asyncL;
    blockedR.required <=> asyncR;
  }
}
