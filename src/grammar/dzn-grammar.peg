template WithPosition<inner> start=@ $inner end=@
template KeepComments<inner> leading_comments=leading_comments _ v=$inner '[^\S\r\n]*' trailing_comment=sl_comment?

file := _ statements={_ statement=root_statement _}* _ trailing_comments={comment=comment_or_whiteline _}* $

leading_comments := _ comments={_ comment=comment_or_whiteline _}*
comment_or_whiteline := sl_comment | ml_comment | '\n[^\S\r\n]*\n'

root_statement :=
  KeepComments<namespace>
  | KeepComments<extern_definition>
  | KeepComments<type>
  | KeepComments<import_statement>
  | KeepComments<interface_definition>
  | KeepComments<component>
  | statement

extern_definition := EXTERN __ type=identifier __ literal=dollars _ SEMICOLON

import_statement := IMPORT __ file_name=file_name _ SEMICOLON
  file_name := '[^;]+'

type := enum_definition | int | extern_definition
  enum_definition := ENUM __ name=identifier _ BRACE_OPEN _ fields=fields _ BRACE_CLOSE _ SEMICOLON
    fields := head=member_identifier? tail={_ COMMA _ elem=member_identifier?}*

  int := SUBINT __ name=compound_name _ BRACE_OPEN _ range=range _ BRACE_CLOSE _ SEMICOLON
    range := from=NUMBER _ DOTDOT _ to=NUMBER

namespace := NAMESPACE __ name=compound_name _ BRACE_OPEN root=namespace_root BRACE_CLOSE
  namespace_root      := statements={_ statement=namespace_statement _}* trailing_comments={comment=comment_or_whiteline _}*
  namespace_statement := type | namespace | interface_definition | component

interface_definition := INTERFACE __ name=identifier _ BRACE_OPEN _ body={_ KeepComments< {type | event} > _}* _ behavior=behavior? _ BRACE_CLOSE
    event := direction=event_direction __ type_name=compound_name __ event_name=identifier _ PAREN_OPEN _ event_params=event_params? _ PAREN_CLOSE _ SEMICOLON
    event_params := head=event_parameter tail={ _ COMMA _ elem=event_parameter }*
    event_parameter := direction={direction=param_direction __}? type=identifier __ name=identifier
      event_direction := IN | OUT
      param_direction := INOUT | IN | OUT

component := COMPONENT c1=__ name=identifier c2=_ BRACE_OPEN c3=_ ports={_ KeepComments< port > _}* c4=_ body=body? c5=_ BRACE_CLOSE
  body := behavior | system
    system := SYSTEM _ BRACE_OPEN _ instances_and_bindings={_ KeepComments< {instance | binding} > _}* _ trailing_comments={comment=comment_or_whiteline _}* BRACE_CLOSE
      instance := type=compound_name _ name=identifier _ SEMICOLON
      binding := left=end_point _ BIND _ right=end_point _ SEMICOLON
        end_point := name=expression _ dot={DOT ASTERISK}? | ASTERISK

  port := direction=port_direction __ qualifiers=port_qualifiers? type=compound_name _ name=identifier _ SEMICOLON
    port_direction := PROVIDES | REQUIRES
    port_qualifiers := {_ qualifier={EXTERNAL | INJECTED | BLOCKING} __}*
    formals := PAREN_OPEN _ formals=formal_list? _ PAREN_CLOSE
      formal_list := head=formal tail={ _ COMMA _ elem=formal }*
      formal := WithPosition< direction={direction=param_direction __}? type_name=compound_name __ name=identifier >

behavior := BEHAVIOR _ name=identifier? _ block=behavior_compound
  behavior_compound := BRACE_OPEN _ statements=behavior_statements _ trailing_comments={comment=comment_or_whiteline _}* BRACE_CLOSE
    behavior_statements := statements={_ KeepComments< behavior_statement > _}* _ trailing_comments={comment=comment_or_whiteline _}*
      behavior_statement := port | function_definition | variable_definition | declarative_statement | type
        function_definition := return_type=compound_name _ name=identifier _ parameters=formals _ body=compound

declarative_statement := KeepComments<on> 
  | KeepComments<guard> 
  | KeepComments<compound>

  on := WithPosition< blocking=BLOCKING? _ ON _  on_trigger_list=on_trigger_list _ COLON _ statement=imperative_statement >
    on_trigger_list := head=on_trigger? tail={ _ COMMA _ elem=on_trigger }*
    on_trigger := name=compound_name _ parameters=on_formals?
    on_formals := PAREN_OPEN _ formals=on_formal_list? _ PAREN_CLOSE
      on_formal_list := head=on_formal tail={ _ COMMA _ elem=on_formal }*
        on_formal := name=identifier _ assignment={LEFT_ARROW _ name=identifier}?
  guard := WithPosition< blocking=BLOCKING? _ BRACKET_OPEN _ condition={OTHERWISE | expression}? _ BRACKET_CLOSE _ statement=statement >

statement   := declarative_statement
  | imperative_statement

compound := WithPosition< blocking=BLOCKING? _ BRACE_OPEN _ statements=statements _ trailing_comments={comment=comment_or_whiteline _}* BRACE_CLOSE >
  statements  := {_ statement=statement _}*

imperative_statement := KeepComments<if_statement>
  | KeepComments<return_statement>
  | KeepComments<variable_definition>
  | KeepComments<assignment>
  | KeepComments<defer_statement>
  | KeepComments<expression_statement>
  | KeepComments<dollar_statement>
  | KeepComments<compound>

  assignment            := WithPosition< left=identifier _ ASSIGN _ right=expression _ SEMICOLON >
  defer_statement       := WithPosition< DEFER _ arguments=defer_arguments? _ statement=imperative_statement >
    defer_arguments       := PAREN_OPEN arguments=arguments PAREN_CLOSE
  dollar_statement      := WithPosition< expression=dollars >
  expression_statement  := WithPosition< expression=expression SEMICOLON >
  if_statement          := WithPosition< IF _ PAREN_OPEN _ expression=expression _ PAREN_CLOSE _ statement=imperative_statement _ else_statements=else_statement* >
    else_statement        := ELSE elseif={__ IF _ PAREN_OPEN _ expression=expression _ PAREN_CLOSE}? _ statement=imperative_statement _
  variable_definition   := WithPosition< type_name=compound_name _ name=identifier _ initializer={ASSIGN _ expression=expression _}? SEMICOLON >
  return_statement      := WithPosition< RETURN _ expression=expression? _ SEMICOLON >

expression := binary_expression | unary_expression
  binary_expression   := left=unary_expression _ operator=binary_operator _ right=expression
    binary_operator   := AND | OR | EQUAL | NOT_EQUAL | LESS_EQUAL | LESS | GREATER_EQUAL | GREATER | PLUS | MINUS

unary_expression := parenthesized_expression | property_expression | call_expression | dollars | ILLEGAL | identifier | numeric_literal | unary_operator_expression
  call_expression             := expression=expression _ PAREN_OPEN arguments=arguments PAREN_CLOSE
    arguments                 := {_ expression=expression _ COMMA?}*
  dollars                     := DOLLAR value='[^$]*' DOLLAR
  numeric_literal             := text=NUMBER
  parenthesized_expression    := PAREN_OPEN _ expression=expression _ PAREN_CLOSE
  property_expression         := expression=expression? DOT access_name=member_identifier
  unary_operator_expression   := operator=unary_operator _ expression=expression
    unary_operator            := NOT


compound_name := {WithPosition< compound=compound_name? DOT name=member_identifier >} | identifier

identifier          := WithPosition< text='[a-zA-Z_][a-zA-Z0-9_]*' >
member_identifier   := WithPosition< text='[a-zA-Z0-9_]+' >

NUMBER              := MINUS? '[0-9]+'
ASTERISK            := '\*'
DOLLAR              := '\$'
BRACE_OPEN          := '{'
BRACE_CLOSE         := '}'
BRACKET_OPEN        := '\['
BRACKET_CLOSE       := '\]'
PAREN_OPEN          := '\('
PAREN_CLOSE         := '\)'
SEMICOLON           := ';'
COLON               := ':'
DOT                 := '\.'
DOTDOT              := '\.\.'
COMMA               := ','
BIND                := '<=>'
ASSIGN              := '='
LEFT_ARROW          := '<-'
OR                  := '\|\|'
AND                 := '&&'
EQUAL               := '=='
NOT_EQUAL           := '!='
LESS                := '<'
LESS_EQUAL          := '<='
GREATER             := '>'
GREATER_EQUAL       := '>='
PLUS                := '\+'
MINUS               := '-'
NOT                 := '!'
COMPARE             := EQUAL | NOT_EQUAL | LESS_EQUAL | LESS | GREATER_EQUAL | GREATER

BEHAVIOR            := 'behavior' | 'behaviour'
BLOCKING            := 'blocking'
BOOL                := 'bool'
COMPONENT           := 'component'
DEFER               := 'defer'
ELSE                := 'else'
ENUM                := 'enum'
EXTERN              := 'extern'
EXTERNAL            := 'external'
FALSE               := 'false'
IF                  := 'if'
ILLEGAL             := WithPosition< 'illegal' >
IMPORT              := 'import'
IN                  := 'in'
INEVITABLE          := 'inevitable'
INJECTED            := 'injected'
INOUT               := 'inout'
INTERFACE           := 'interface'
NAMESPACE           := 'namespace'
ON                  := 'on'
OPTIONAL            := 'optional'
OTHERWISE           := 'otherwise'
OUT                 := 'out'
PROVIDES            := 'provides'
REPLY               := 'reply'
REQUIRES            := 'requires'
RETURN              := 'return'
SUBINT              := 'subint'
SYSTEM              := 'system'
TRUE                := 'true'
VOID                := 'void'
NEWLINE             := '\n'


sl_comment          := WithPosition< text='//[^\n]*\n' >
ml_comment          := WithPosition< '/\*' text={!ml_comment_end '.'}* ml_comment_end >
  ml_comment_end    := '\*' '/'
_                   := '\s*'
__                  := '\s+'
